# {{ ansible_managed }}

{% if bootstrap_syslog_target_protocol | lower == 'http' and bootstrap_syslog_target_log_format | lower == 'gelf' %}
#
# https://www.syslog-ng.com/technical-documents/doc/syslog-ng-open-source-edition/3.16/administration-guide/35#TOPIC-956514
#
template t_json_msg {
	{# dict2items requires ansible >= 2.6 #}
	{#template("$(format-json --scope all --scope nv_pairs {#% for tag in bootstrap_syslog_additional_tags | dict2items %} --pair {{ tag.key }}={{ tag.value }}{% endfor %} )\n") #}
	template("$(format-json --scope all --scope nv_pairs {% for tag in bootstrap_syslog_additional_tags %}--pair {{ tag }}={{ bootstrap_syslog_additional_tags[tag] }}{% endfor %})\n")
}

destination d_http {
	http(
		url("http://{{ bootstrap_syslog_target_host }}:{{ bootstrap_syslog_target_port }}/{{ bootstrap_syslog_target_http_path }}")
		method("PUT")
		user-agent("syslog-ng")
{% if bootstrap_syslog_target_username != None and bootstrap_syslog_target_password != None %}
		user("{{ bootstrap_syslog_target_http_username }}")
		password("{{ bootstrap_syslog_target_http_password }}")
{% endif %}
{% if bootstrap_syslog_target_http_headers != None and bootstrap_syslog_target_http_headers | length > 0 %}
		headers(
{% for header in bootstrap_syslog_target_http_headers | dict2items %} 
			"{{ header.key }}: {{ header.value }}",
{% endfor %}
		)
{% endif %}
		body(t_json_msg)
	);
};

log {
	source(s_src); destination(d_http); flags(flow-control);
};
{% endif %}
{% if bootstrap_syslog_target_log_format | lower == 'syslog' and bootstrap_syslog_target_protocol | lower != 'http' %}

destination d_syslog {
	network(
		"{{ bootstrap_syslog_target_host }}"
		port({{ bootstrap_syslog_target_port }})
		transport({{ bootstrap_syslog_target_protocol }})
	);
};

log {
	source(s_src); destination(d_syslog); flags(flow-control);
};
{% endif %}
